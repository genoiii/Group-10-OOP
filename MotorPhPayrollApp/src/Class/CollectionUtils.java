/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Class;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * Utility class for collection-related operations.
 *
 * <p>This class is intended to hold static helper methods for working with collections.
 * It is not meant to be instantiated.</p>
 */
public class CollectionUtils {
    /**
     * Converts a List of items into a Map using a key extractor function.
     *
     * <p>This method streams through the list and collects its items into a Map.
     * The key for each entry is generated by the provided keyExtractor, and the value is the item itself.
     * In case of duplicate keys, the first occurrence is retained.</p>
     *
     * @param list the list of items to convert.
     * @param keyExtractor a function to extract a key from an item.
     * @param <K> the type of keys in the resulting map.
     * @param <T> the type of items in the list.
     * @return a Map containing the list items keyed by the extracted key.
     */   
    public static <K, T> Map<K, T> listToMap(List<T> list, Function<T, K> keyExtractor) {
        // Convert the list to a stream and collect items into a map.
        return list.stream().collect(Collectors.toMap(
            keyExtractor, // Use keyExtractor to derive the key for each item.
            item -> item, // Map the item itself as the value.
            (existing, replacement) -> existing // In case of duplicate keys, keep the first occurrence.
        ));
    }
}
